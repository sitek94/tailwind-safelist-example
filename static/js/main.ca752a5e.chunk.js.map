{"version":3,"sources":["App.tsx","index.tsx"],"names":["ReadingType","Color","domainConfig","glucose","text","color","warmGray","ketone","blue","gki","gray","bloodPressure","red","fat","green","heartRate","ReadingTypeList","readingTypes","map","readingType","className","clsx","App","ReactDOM","document","getElementById"],"mappings":"8IAEKA,EASAC,E,6CATAD,K,kBAAAA,E,gBAAAA,E,UAAAA,E,8BAAAA,E,UAAAA,E,uBAAAA,M,cASAC,K,YAAAA,E,oBAAAA,E,YAAAA,E,cAAAA,E,WAAAA,M,KAQE,IAAMC,EAAoE,CAC/EC,QAAS,CACPC,KAAM,UACNC,MAAOJ,EAAMK,UAEfC,OAAQ,CACNH,KAAM,UACNC,MAAOJ,EAAMO,MAEfC,IAAK,CACHL,KAAM,MACNC,MAAOJ,EAAMS,MAEfC,cAAe,CACbP,KAAM,iBACNC,MAAOJ,EAAMW,KAEfC,IAAK,CACHT,KAAM,MACNC,MAAOJ,EAAMa,OAEfC,UAAW,CACTX,KAAM,aACNC,MAAOJ,EAAMW,MAKXI,EAAkB,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,aACzB,OACE,8BACGA,EAAaC,KAAI,SAACC,GACjB,MAAwBjB,EAAaiB,GAA7Bd,EAAR,EAAQA,MAAOD,EAAf,EAAeA,KACf,OACE,qBAAgBgB,UAAWC,YAAK,MAAD,aAAchB,EAAd,SAA/B,SACE,mBAAGe,UAAU,UAAb,SAAwBhB,KADhBA,SASL,SAASkB,IACtB,OACE,qBAAKF,UAAU,yBAAf,SACE,cAAC,EAAD,CACEH,aAAc,CACZjB,EAAYG,QACZH,EAAYO,OACZP,EAAYS,IACZT,EAAYW,cACZX,EAAYa,IACZb,EAAYe,eClEtBQ,SACE,cAAC,aAAD,UACE,cAACD,EAAD,MAEFE,SAASC,eAAe,U","file":"static/js/main.ca752a5e.chunk.js","sourcesContent":["import clsx from 'clsx';\n\nenum ReadingType {\n  glucose = 'glucose',\n  ketone = \"ketone\",\n  gki = \"gki\",\n  bloodPressure = \"bloodPressure\",\n  fat = \"fat\",\n  heartRate = \"heartRate\"\n}\n\nenum Color {\n  blue = 'blue',\n  warmGray = 'warmGray',\n  gray = 'gray',\n  green = 'green',\n  red = 'red',\n}\n\nexport const domainConfig: Record<ReadingType, { color: Color, text: string }> = {\n  glucose: {\n    text: 'Glucose',\n    color: Color.warmGray\n  },\n  ketone: {\n    text: 'Ketones',\n    color: Color.blue\n  },\n  gki: {\n    text: 'GKI',\n    color: Color.gray\n  },\n  bloodPressure: {\n    text: 'Blood Pressure',\n    color: Color.red\n  },\n  fat: {\n    text: 'Fat',\n    color: Color.green\n  },\n  heartRate: {\n    text: 'Heart Rate',\n    color: Color.red\n  }\n};\n\n\nconst ReadingTypeList = ({ readingTypes }: { readingTypes: ReadingType[] }) => {\n  return (\n    <div>\n      {readingTypes.map((readingType) => {\n        const { color, text } = domainConfig[readingType];\n        return (\n          <div key={text} className={clsx('p-4', `bg-${color}-500`)}>\n            <p className=\"text-lg\">{text}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"max-w-sm mx-auto mt-12\">\n      <ReadingTypeList\n        readingTypes={[\n          ReadingType.glucose,\n          ReadingType.ketone,\n          ReadingType.gki,\n          ReadingType.bloodPressure,\n          ReadingType.fat,\n          ReadingType.heartRate,\n        ]}\n      />\n    </div>\n  );\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}